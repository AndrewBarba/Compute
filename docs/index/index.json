{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/contenttype","title":"var contentType: String?","type":"property"},{"path":"\/documentation\/compute\/outgoingresponse\/headers","title":"var headers: Headers<Fastly.Response>","type":"property"},{"path":"\/documentation\/compute\/outgoingresponse\/status","title":"var status: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/append(_:)-7e5mo","title":"func append([ReadableBody]) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/append(_:)-94i1","title":"func append(ReadableBody...) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/cancel()","title":"func cancel() throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/contenttype(_:)","title":"func contentType(String) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/cookie(_:_:_:)-21r73","title":"func cookie(String, String, OutgoingResponse.CookieOption...) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/cookie(_:_:_:)-9xp21","title":"func cookie(String, String, [OutgoingResponse.CookieOption]) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/cors(origin:methods:allowheaders:allowcredentials:exposeheaders:maxage:)","title":"func cors(origin: String, methods: [HTTPMethod], allowHeaders: [HTTPHeaderRepresentable]?, allowCredentials: Bool?, exposeHeaders: [HTTPHeaderRepresentable]?, maxAge: Int) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/end()","title":"func end() async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/header(_:_:)-3edhw","title":"func header(HTTPHeader, String?) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/header(_:_:)-7hcg7","title":"func header(String, String?) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/pipefrom(_:)-502km","title":"func pipeFrom(ReadableBody...) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/pipefrom(_:)-7f59r","title":"func pipeFrom([ReadableBody]) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/proxy(_:streaming:)","title":"func proxy(FetchResponse, streaming: Bool) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/redirect(_:permanent:)","title":"func redirect(String, permanent: Bool) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send()","title":"func send() async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-2yrfu","title":"func send([Sendable]) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-5h9gl","title":"func send(Data) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-740v7","title":"func send(ReadableBody) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-8atoy","title":"func send(String) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-9ogkd","title":"func send([String : Sendable]) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:)-gdtj","title":"func send([UInt8]) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(_:encoder:contenttype:)","title":"func send<T>(T, encoder: JSONEncoder, contentType: String) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(html:)","title":"func send(html: String) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/send(xml:)","title":"func send(xml: String) async throws","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/status(_:)-2qrdo","title":"func status(Int) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/status(_:)-98edu","title":"func status(HTTPStatus) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/upgradetohttp3(maxage:)","title":"func upgradeToHTTP3(maxAge: Int) -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:)-3ihxc","title":"func write([String : Sendable]) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:)-3mcko","title":"func write(Data) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:)-4vm5z","title":"func write(String) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:)-5pgjf","title":"func write([UInt8]) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:)-87ug4","title":"func write([Sendable]) async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/outgoingresponse\/write(_:encoder:)","title":"func write<T>(T, encoder: JSONEncoder) async throws -> Self","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/domain(_:)","title":"case domain(String)","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/httponly","title":"case httpOnly","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/maxage(_:)","title":"case maxAge(TimeInterval)","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/path(_:)","title":"case path(String)","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite(_:)","title":"case sameSite(OutgoingResponse.CookieOption.SameSite)","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/secure","title":"case secure","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/lax","title":"case lax","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/none","title":"case none","type":"case"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/strict","title":"case strict","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/outgoingresponse\/cookieoption\/samesite","title":"OutgoingResponse.CookieOption.SameSite","type":"enum"}],"path":"\/documentation\/compute\/outgoingresponse\/cookieoption","title":"OutgoingResponse.CookieOption","type":"enum"}],"path":"\/documentation\/compute\/outgoingresponse","title":"OutgoingResponse","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/readablebody\/used","title":"var used: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/readablebody\/bytes()","title":"func bytes() throws -> [UInt8]","type":"method"},{"path":"\/documentation\/compute\/readablebody\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/compute\/readablebody\/data()","title":"func data() throws -> Data","type":"method"},{"path":"\/documentation\/compute\/readablebody\/decode(decoder:)","title":"func decode<T>(decoder: JSONDecoder) throws -> T","type":"method"},{"path":"\/documentation\/compute\/readablebody\/formvalues()","title":"func formValues() throws -> [String : String]","type":"method"},{"path":"\/documentation\/compute\/readablebody\/json()","title":"func json() throws -> Sendable","type":"method"},{"path":"\/documentation\/compute\/readablebody\/jsonarray()","title":"func jsonArray() throws -> [Sendable]","type":"method"},{"path":"\/documentation\/compute\/readablebody\/jsonobject()","title":"func jsonObject() throws -> [String : Sendable]","type":"method"},{"path":"\/documentation\/compute\/readablebody\/pipeto(_:preventclose:)","title":"func pipeTo(isolated WritableBody, preventClose: Bool) throws","type":"method"},{"path":"\/documentation\/compute\/readablebody\/text()","title":"func text() throws -> String","type":"method"}],"path":"\/documentation\/compute\/readablebody","title":"ReadableBody","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/router\/init(prefix:)","title":"init(prefix: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/router\/prefix","title":"let prefix: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/router\/all(_:_:)","title":"func all(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/delete(_:_:)","title":"func delete(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/get(_:_:)","title":"func get(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/head(_:_:)","title":"func head(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/listen()","title":"func listen() async throws -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/options(_:_:)","title":"func options(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/patch(_:_:)","title":"func patch(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/post(_:_:)","title":"func post(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/put(_:_:)","title":"func put(String, Router.Handler) -> Self","type":"method"},{"path":"\/documentation\/compute\/router\/run(_:_:)","title":"func run(IncomingRequest, OutgoingResponse) async throws","type":"method"},{"path":"\/documentation\/compute\/router\/use(_:)","title":"func use(Router.Handler) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/compute\/router\/handler","title":"Router.Handler","type":"typealias"}],"path":"\/documentation\/compute\/router","title":"Router","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/writablebody\/used","title":"var used: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/writablebody\/append(_:)","title":"func append(isolated ReadableBody) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/pipefrom(_:preventclose:)","title":"func pipeFrom(isolated ReadableBody, preventClose: Bool) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:)-511eb","title":"func write(String) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:)-5e2tp","title":"func write([UInt8]) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:)-9rfl0","title":"func write(Data) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:encoder:formatting:)","title":"func write<T>(T, encoder: JSONEncoder, formatting: JSONEncoder.OutputFormatting) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:options:)-6tcr8","title":"func write([String : Sendable], options: JSONSerialization.WritingOptions) throws","type":"method"},{"path":"\/documentation\/compute\/writablebody\/write(_:options:)-71m6c","title":"func write([Sendable], options: JSONSerialization.WritingOptions) throws","type":"method"}],"path":"\/documentation\/compute\/writablebody","title":"WritableBody","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheaderrepresentable\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/compute\/httpheaderrepresentable","title":"HTTPHeaderRepresentable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/headersprovider\/appendheader(_:_:)","title":"func appendHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/headersprovider\/getheader(_:)","title":"func getHeader(String) throws -> String?","type":"method"},{"path":"\/documentation\/compute\/headersprovider\/getheadernames()","title":"func getHeaderNames() throws -> [String]","type":"method"},{"path":"\/documentation\/compute\/headersprovider\/insertheader(_:_:)","title":"func insertHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/headersprovider\/removeheader(_:)","title":"func removeHeader(String) throws","type":"method"}],"path":"\/documentation\/compute\/headersprovider","title":"HeadersProvider","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/init(rawvalue:)","title":"init(rawValue: UInt32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/rawvalue","title":"let rawValue: UInt32","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/betweenbytestimeout","title":"static let betweenBytesTimeout: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/cacert","title":"static let caCert: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/certhostname","title":"static let certHostname: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/ciphers","title":"static let ciphers: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/connecttimeout","title":"static let connectTimeout: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/firstbytetimeout","title":"static let firstByteTimeout: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/hostoverride","title":"static let hostOverride: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/reserved","title":"static let reserved: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/snihostname","title":"static let sniHostname: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/sslmaxversion","title":"static let sslMaxVersion: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/sslminversion","title":"static let sslMinVersion: BackendConfigOptions","type":"property"},{"path":"\/documentation\/compute\/backendconfigoptions\/usessl","title":"static let useSSL: BackendConfigOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/backendconfigoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/compute\/backendconfigoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/compute\/backendconfigoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/backendconfigoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/compute\/backendconfigoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/compute\/backendconfigoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/compute\/backendconfigoptions","title":"BackendConfigOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/init(rawvalue:)","title":"init(rawValue: UInt32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/rawvalue","title":"let rawValue: UInt32","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/none","title":"static let none: CacheOverrideTag","type":"property"},{"path":"\/documentation\/compute\/cacheoverridetag\/pass","title":"static let pass: CacheOverrideTag","type":"property"},{"path":"\/documentation\/compute\/cacheoverridetag\/pci","title":"static let pci: CacheOverrideTag","type":"property"},{"path":"\/documentation\/compute\/cacheoverridetag\/swr","title":"static let swr: CacheOverrideTag","type":"property"},{"path":"\/documentation\/compute\/cacheoverridetag\/ttl","title":"static let ttl: CacheOverrideTag","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/cacheoverridetag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/compute\/cacheoverridetag\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/compute\/cacheoverridetag\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/cacheoverridetag\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/compute\/cacheoverridetag\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/compute\/cacheoverridetag\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/compute\/cacheoverridetag","title":"CacheOverrideTag","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/console-swift.struct\/init(prefix:)","title":"init(prefix: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/console-swift.struct\/prefix","title":"var prefix: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/console-swift.struct\/error(_:)","title":"func error(Any...)","type":"method"},{"path":"\/documentation\/compute\/console-swift.struct\/log(_:)","title":"func log(Any...)","type":"method"}],"path":"\/documentation\/compute\/console-swift.struct","title":"Console","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/environment\/compute\/cachegeneration","title":"static var cacheGeneration: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/customerid","title":"static var customerId: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/hostname","title":"static var hostname: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/pop","title":"static var pop: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/region","title":"static var region: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/serviceid","title":"static var serviceId: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/serviceversion","title":"static var serviceVersion: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/traceid","title":"static var traceId: String","type":"property"},{"path":"\/documentation\/compute\/environment\/compute\/viceroy","title":"static var viceroy: Bool","type":"property"}],"path":"\/documentation\/compute\/environment\/compute","title":"Environment.Compute","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/environment\/get(_:)","title":"static func get(String) -> String?","type":"method"}],"path":"\/documentation\/compute\/environment","title":"Environment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/environmentvariable\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/compute\/environmentvariable\/init(_:defaultvalue:)","title":"init(String, defaultValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/environmentvariable\/key","title":"let key: String","type":"property"},{"path":"\/documentation\/compute\/environmentvariable\/wrappedvalue","title":"let wrappedValue: Value","type":"property"}],"path":"\/documentation\/compute\/environmentvariable","title":"EnvironmentVariable","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/options\/acceptencoding","title":"var acceptEncoding: ContentEncodings?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/backend","title":"var backend: String?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/body","title":"var body: FetchRequest.Body?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/cachekey","title":"var cacheKey: String?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/cachepolicy","title":"var cachePolicy: CachePolicy","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/headers","title":"var headers: [String : String]","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/searchparams","title":"var searchParams: [String : String]","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/surrogatekey","title":"var surrogateKey: String?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/options\/timeout","title":"var timeout: TimeInterval","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/options\/options(method:body:headers:searchparams:timeout:cachepolicy:cachekey:acceptencoding:surrogatekey:backend:)","title":"static func options(method: HTTPMethod, body: FetchRequest.Body?, headers: [String : String], searchParams: [String : String], timeout: TimeInterval, cachePolicy: CachePolicy, cacheKey: String?, acceptEncoding: ContentEncodings?, surrogateKey: String?, backend: String?) -> FetchRequest.Options","type":"method"}],"path":"\/documentation\/compute\/fetchrequest\/options","title":"FetchRequest.Options","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/init(_:_:)","title":"init(URL, FetchRequest.Options)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/acceptencoding","title":"var acceptEncoding: ContentEncodings?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/backend","title":"var backend: String","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.property","title":"var body: FetchRequest.Body?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/cachekey","title":"var cacheKey: String?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/cachepolicy","title":"var cachePolicy: CachePolicy","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/headers","title":"var headers: [String : String]","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/searchparams","title":"var searchParams: [String : String]","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/surrogatekey","title":"var surrogateKey: String?","type":"property"},{"path":"\/documentation\/compute\/fetchrequest\/url","title":"var url: URL","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/bytes(_:)","title":"case bytes([UInt8])","type":"case"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/data(_:)","title":"case data(Data)","type":"case"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/json(_:)-swift.enum.case","title":"case json(Data)","type":"case"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/stream(_:)","title":"case stream(ReadableBody)","type":"case"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/text(_:)","title":"case text(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/defaultcontenttype","title":"var defaultContentType: String?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/json(_:)-swift.type.method-182e3","title":"static func json([String : Any]) throws -> FetchRequest.Body","type":"method"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/json(_:)-swift.type.method-4wzmn","title":"static func json([Any]) throws -> FetchRequest.Body","type":"method"},{"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum\/json(_:encoder:)","title":"static func json<T>(T, encoder: JSONEncoder) throws -> FetchRequest.Body","type":"method"}],"path":"\/documentation\/compute\/fetchrequest\/body-swift.enum","title":"FetchRequest.Body","type":"enum"}],"path":"\/documentation\/compute\/fetchrequest","title":"FetchRequest","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchresponse\/body","title":"let body: ReadableBody","type":"property"},{"path":"\/documentation\/compute\/fetchresponse\/bodyused","title":"var bodyUsed: Bool","type":"property"},{"path":"\/documentation\/compute\/fetchresponse\/headers","title":"let headers: Headers<Fastly.Response>","type":"property"},{"path":"\/documentation\/compute\/fetchresponse\/ok","title":"var ok: Bool","type":"property"},{"path":"\/documentation\/compute\/fetchresponse\/status","title":"let status: Int","type":"property"},{"path":"\/documentation\/compute\/fetchresponse\/url","title":"var url: URL","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchresponse\/bytes()","title":"func bytes() async throws -> [UInt8]","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/data()","title":"func data() async throws -> Data","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/decode(decoder:)","title":"func decode<T>(decoder: JSONDecoder) async throws -> T","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/formvalues()","title":"func formValues() async throws -> [String : String]","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/json()","title":"func json() async throws -> Any","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/jsonarray()","title":"func jsonArray() async throws -> [Any]","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/jsonobject()","title":"func jsonObject() async throws -> [String : Any]","type":"method"},{"path":"\/documentation\/compute\/fetchresponse\/text()","title":"func text() async throws -> String","type":"method"}],"path":"\/documentation\/compute\/fetchresponse","title":"FetchResponse","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/headers\/append(_:_:)-55cg4","title":"func append(String, String)","type":"method"},{"path":"\/documentation\/compute\/headers\/append(_:_:)-6rpd8","title":"func append(HTTPHeader, String)","type":"method"},{"path":"\/documentation\/compute\/headers\/delete(_:)-3r2l7","title":"func delete(HTTPHeader)","type":"method"},{"path":"\/documentation\/compute\/headers\/delete(_:)-48vso","title":"func delete(String)","type":"method"},{"path":"\/documentation\/compute\/headers\/dictionary()","title":"func dictionary() -> [String : String]","type":"method"},{"path":"\/documentation\/compute\/headers\/entries()","title":"func entries() -> [(key: String, value: String)]","type":"method"},{"path":"\/documentation\/compute\/headers\/get(_:)-3n6wo","title":"func get(HTTPHeader) -> String?","type":"method"},{"path":"\/documentation\/compute\/headers\/get(_:)-506c3","title":"func get(String) -> String?","type":"method"},{"path":"\/documentation\/compute\/headers\/has(_:)-3uqjx","title":"func has(String) -> Bool","type":"method"},{"path":"\/documentation\/compute\/headers\/has(_:)-49l69","title":"func has(HTTPHeader) -> Bool","type":"method"},{"path":"\/documentation\/compute\/headers\/keys()","title":"func keys() -> [String]","type":"method"},{"path":"\/documentation\/compute\/headers\/set(_:_:)-1pxl5","title":"func set(String, String?)","type":"method"},{"path":"\/documentation\/compute\/headers\/set(_:_:)-7t48z","title":"func set(HTTPHeader, String?)","type":"method"},{"path":"\/documentation\/compute\/headers\/values()","title":"func values() -> [String]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/compute\/headers\/subscript(_:)-5e94g","title":"subscript(HTTPHeader) -> String?","type":"subscript"},{"path":"\/documentation\/compute\/headers\/subscript(_:)-9yxl0","title":"subscript(String) -> String?","type":"subscript"},{"path":"\/documentation\/compute\/headers\/subscript(_:default:)-9kgqt","title":"subscript(HTTPHeader, default _: String) -> String","type":"subscript"},{"path":"\/documentation\/compute\/headers\/subscript(_:default:)-ee0s","title":"subscript(String, default _: String) -> String","type":"subscript"}],"path":"\/documentation\/compute\/headers","title":"Headers","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/incomingrequest\/body","title":"let body: ReadableBody","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/bodyused","title":"var bodyUsed: Bool","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/headers","title":"let headers: Headers<Fastly.Request>","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/httpversion","title":"let httpVersion: HTTPVersion","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/method","title":"let method: HTTPMethod","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/pathparams","title":"var pathParams: Parameters","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/searchparams","title":"let searchParams: [String : String]","type":"property"},{"path":"\/documentation\/compute\/incomingrequest\/url","title":"let url: URL","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/incomingrequest\/clientfingerprint()","title":"func clientFingerprint() -> String?","type":"method"},{"path":"\/documentation\/compute\/incomingrequest\/clientipaddress()","title":"func clientIpAddress() -> IPAddress","type":"method"},{"path":"\/documentation\/compute\/incomingrequest\/isupgradewebsocketrequest()","title":"func isUpgradeWebsocketRequest() -> Bool","type":"method"},{"path":"\/documentation\/compute\/incomingrequest\/range()","title":"func range() -> Range?","type":"method"},{"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocket(backend:behavior:)","title":"func upgradeWebsocket(backend: String, behavior: IncomingRequest.UpgradeWebsocketBehavior) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocketbehavior\/fanout","title":"case fanout","type":"case"},{"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocketbehavior\/proxy","title":"case proxy","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocketbehavior\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocketbehavior\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/incomingrequest\/upgradewebsocketbehavior","title":"IncomingRequest.UpgradeWebsocketBehavior","type":"enum"}],"path":"\/documentation\/compute\/incomingrequest","title":"IncomingRequest","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/objectstore\/entry\/body","title":"let body: ReadableBody","type":"property"}],"path":"\/documentation\/compute\/objectstore\/entry","title":"ObjectStore.Entry","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/objectstore\/init(name:)","title":"init(name: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/objectstore\/name","title":"var name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/objectstore\/get(_:)","title":"func get(String) async throws -> ObjectStore.Entry?","type":"method"},{"path":"\/documentation\/compute\/objectstore\/has(_:)","title":"func has(String) async throws -> Bool","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:body:)","title":"func put(String, body: ReadableBody) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:bytes:)","title":"func put(String, bytes: [UInt8]) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:data:)","title":"func put(String, data: Data) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:jsonarray:)","title":"func put(String, jsonArray: [Any]) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:jsonobject:)","title":"func put(String, jsonObject: [String : Any]) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:text:)","title":"func put(String, text: String) async throws","type":"method"},{"path":"\/documentation\/compute\/objectstore\/put(_:value:encoder:)","title":"func put<T>(String, value: T, encoder: JSONEncoder) async throws","type":"method"}],"path":"\/documentation\/compute\/objectstore","title":"ObjectStore","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/parameters\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/parameters\/get(_:)","title":"func get(String) -> String?","type":"method"},{"path":"\/documentation\/compute\/parameters\/get(_:as:)","title":"func get<T>(String, as: T.Type) -> T?","type":"method"},{"path":"\/documentation\/compute\/parameters\/getcatchall()","title":"func getCatchall() -> [String]","type":"method"},{"path":"\/documentation\/compute\/parameters\/set(_:to:)","title":"func set(String, to: String?)","type":"method"},{"path":"\/documentation\/compute\/parameters\/setcatchall(matched:)","title":"func setCatchall(matched: [String])","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/compute\/parameters\/subscript(_:)","title":"subscript(String) -> String?","type":"subscript"},{"path":"\/documentation\/compute\/parameters\/subscript(_:default:)","title":"subscript(String, default _: String) -> String","type":"subscript"}],"path":"\/documentation\/compute\/parameters","title":"Parameters","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/range\/init(from:)","title":"init?(from: String)","type":"init"},{"path":"\/documentation\/compute\/range\/init(unit:intervals:)","title":"init(unit: String, intervals: [RangeInterval])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/range\/intervals","title":"let intervals: [RangeInterval]","type":"property"},{"path":"\/documentation\/compute\/range\/unit","title":"let unit: String","type":"property"}],"path":"\/documentation\/compute\/range","title":"Range","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/compute\/invalidwasihandle","title":"let InvalidWasiHandle: UInt32","type":"var"},{"path":"\/documentation\/compute\/console-swift.var","title":"let console: Console","type":"var"},{"path":"\/documentation\/compute\/highwatermark","title":"let highWaterMark: Int","type":"var"},{"path":"\/documentation\/compute\/maxdictionaryentrylength","title":"let maxDictionaryEntryLength: Int","type":"var"},{"path":"\/documentation\/compute\/maxheaderlength","title":"let maxHeaderLength: Int","type":"var"},{"path":"\/documentation\/compute\/maxiplookuplength","title":"let maxIpLookupLength: Int","type":"var"},{"path":"\/documentation\/compute\/maxmethodlength","title":"let maxMethodLength: Int","type":"var"},{"path":"\/documentation\/compute\/maxurilength","title":"let maxUriLength: Int","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/compute\/fetch(_:)","title":"func fetch(FetchRequest) async throws -> FetchResponse","type":"func"},{"path":"\/documentation\/compute\/fetch(_:_:)-4zovm","title":"func fetch(URL, FetchRequest.Options) async throws -> FetchResponse","type":"func"},{"path":"\/documentation\/compute\/fetch(_:_:)-583p2","title":"func fetch(String, FetchRequest.Options) async throws -> FetchResponse","type":"func"},{"path":"\/documentation\/compute\/fetch(_:origin:streaming:_:)","title":"func fetch(IncomingRequest, origin: String, streaming: Bool, FetchRequest.Options) async throws -> FetchResponse","type":"func"},{"path":"\/documentation\/compute\/onincomingrequest(_:)","title":"func onIncomingRequest((IncomingRequest, OutgoingResponse) async throws -> Void) async throws","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/compute\/configstore","title":"ConfigStore","type":"typealias"},{"path":"\/documentation\/compute\/dictionary","title":"Dictionary","type":"typealias"},{"path":"\/documentation\/compute\/doneindex","title":"DoneIndex","type":"typealias"},{"path":"\/documentation\/compute\/fixedrange","title":"FixedRange","type":"typealias"},{"path":"\/documentation\/compute\/headercount","title":"HeaderCount","type":"typealias"},{"path":"\/documentation\/compute\/isdone","title":"IsDone","type":"typealias"},{"path":"\/documentation\/compute\/multivaluecursor","title":"MultiValueCursor","type":"typealias"},{"path":"\/documentation\/compute\/multivaluecursorresult","title":"MultiValueCursorResult","type":"typealias"},{"path":"\/documentation\/compute\/wasihandle","title":"WasiHandle","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/bodyscancontinuation\/break","title":"case `break`","type":"case"},{"path":"\/documentation\/compute\/bodyscancontinuation\/continue","title":"case `continue`","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/bodyscancontinuation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/bodyscancontinuation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/bodyscancontinuation","title":"BodyScanContinuation","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/bodywriteend\/back","title":"case back","type":"case"},{"path":"\/documentation\/compute\/bodywriteend\/front","title":"case front","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/bodywriteend\/init(rawvalue:)","title":"init?(rawValue: Int32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/bodywriteend\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/bodywriteend\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/bodywriteend\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/bodywriteend\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/bodywriteend\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/bodywriteend","title":"BodyWriteEnd","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/cachepolicy\/origin","title":"case origin","type":"case"},{"path":"\/documentation\/compute\/cachepolicy\/pass","title":"case pass","type":"case"},{"path":"\/documentation\/compute\/cachepolicy\/ttl(_:stalewhilerevalidate:pcicompliant:)","title":"case ttl(Int, staleWhileRevalidate: Int, pciCompliant: Bool)","type":"case"}],"path":"\/documentation\/compute\/cachepolicy","title":"CachePolicy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/gzip","title":"case gzip","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/init(rawvalue:)","title":"init?(rawValue: UInt32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/contentencodings\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/contentencodings\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/contentencodings\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/contentencodings","title":"ContentEncodings","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/abi\/currentabiversion","title":"static let currentABIVersion: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/abi\/initialize(version:)","title":"static func initialize(version: Int) throws -> WasiStatus","type":"method"}],"path":"\/documentation\/compute\/fastly\/abi","title":"Fastly.ABI","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/body\/used","title":"var used: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/body\/append(_:)","title":"func append(Fastly.Body) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/body\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/body\/read(highwatermark:onchunk:)","title":"func read(highWaterMark: Int, onChunk: ([UInt8]) throws -> BodyScanContinuation) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/body\/scan(highwatermark:)","title":"func scan(highWaterMark: Int) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/compute\/fastly\/body\/write(_:location:)","title":"func write([UInt8], location: BodyWriteEnd) throws -> Int","type":"method"}],"path":"\/documentation\/compute\/fastly\/body","title":"Fastly.Body","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/configstore\/init(name:)","title":"init(name: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/configstore\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/configstore\/get(_:)","title":"func get(String) -> String?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/configstore\/subscript(_:)","title":"subscript(String) -> String?","type":"subscript"},{"path":"\/documentation\/compute\/fastly\/configstore\/subscript(_:default:)","title":"subscript(String, default _: String) -> String","type":"subscript"}],"path":"\/documentation\/compute\/fastly\/configstore","title":"Fastly.ConfigStore","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/areacode","title":"let areaCode: Int?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/asname","title":"let asName: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/asnumber","title":"let asNumber: Int?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/city","title":"let city: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/connspeed","title":"let connSpeed: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/conntype","title":"let connType: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/continent","title":"let continent: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/countrycode","title":"let countryCode: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/countrycode3","title":"let countryCode3: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/countryname","title":"let countryName: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/gmtoffset","title":"let gmtOffset: Int?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/latitude","title":"let latitude: Double?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/longitude","title":"let longitude: Double?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/metrocode","title":"let metroCode: Int?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/postalcode","title":"let postalCode: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/proxydescription","title":"let proxyDescription: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/proxytype","title":"let proxyType: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/region","title":"let region: String?","type":"property"},{"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup\/utcoffset","title":"let utcOffset: Int?","type":"property"}],"path":"\/documentation\/compute\/fastly\/geolocation\/iplookup","title":"Fastly.GeoLocation.IpLookup","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/geolocation\/lookup(ip:)-84swz","title":"static func lookup(ip: [UInt8]) throws -> Fastly.GeoLocation.IpLookup","type":"method"},{"path":"\/documentation\/compute\/fastly\/geolocation\/lookup(ip:)-99qpv","title":"static func lookup(ip: IPAddress) throws -> Fastly.GeoLocation.IpLookup","type":"method"}],"path":"\/documentation\/compute\/fastly\/geolocation","title":"Fastly.GeoLocation","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/logger\/init(name:)","title":"init(name: String) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/logger\/write(_:)-2d1g3","title":"func write(String...) throws -> Int","type":"method"},{"path":"\/documentation\/compute\/fastly\/logger\/write(_:)-64jkq","title":"func write(Data) throws -> Int","type":"method"},{"path":"\/documentation\/compute\/fastly\/logger\/write(_:encoder:formatting:)","title":"func write<T>(T, encoder: JSONEncoder, formatting: JSONEncoder.OutputFormatting) throws -> Int","type":"method"},{"path":"\/documentation\/compute\/fastly\/logger\/write(_:options:)-84wvd","title":"func write([Any], options: JSONSerialization.WritingOptions) throws -> Int","type":"method"},{"path":"\/documentation\/compute\/fastly\/logger\/write(_:options:)-zjsm","title":"func write([String : Any], options: JSONSerialization.WritingOptions) throws -> Int","type":"method"}],"path":"\/documentation\/compute\/fastly\/logger","title":"Fastly.Logger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/objectstore\/init(name:)","title":"init(name: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/objectstore\/name","title":"let name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/objectstore\/insert(_:body:)","title":"func insert(String, body: Fastly.Body) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/objectstore\/insert(_:bytes:)","title":"func insert(String, bytes: [UInt8]) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/objectstore\/lookup(_:)","title":"func lookup(String) throws -> Fastly.Body?","type":"method"}],"path":"\/documentation\/compute\/fastly\/objectstore","title":"Fastly.ObjectStore","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/pendingrequest\/request","title":"let request: Fastly.Request","type":"property"}],"path":"\/documentation\/compute\/fastly\/pendingrequest","title":"Fastly.PendingRequest","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/init(connecttimeoutms:firstbytetimeoutms:betweenbytestimeoutms:ssl:sslminversion:sslmaxversion:)","title":"init(connectTimeoutMs: Int, firstByteTimeoutMs: Int, betweenBytesTimeoutMs: Int, ssl: Bool, sslMinVersion: TLSVersion, sslMaxVersion: TLSVersion)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/betweenbytestimeoutms","title":"var betweenBytesTimeoutMs: Int","type":"property"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/connecttimeoutms","title":"var connectTimeoutMs: Int","type":"property"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/firstbytetimeoutms","title":"var firstByteTimeoutMs: Int","type":"property"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/ssl","title":"var ssl: Bool","type":"property"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/sslmaxversion","title":"var sslMaxVersion: TLSVersion","type":"property"},{"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions\/sslminversion","title":"var sslMinVersion: TLSVersion","type":"property"}],"path":"\/documentation\/compute\/fastly\/request\/dynamicbackendoptions","title":"Fastly.Request.DynamicBackendOptions","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/request\/init()","title":"init() throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/request\/appendheader(_:_:)","title":"func appendHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/gethttpversion()","title":"func getHTTPVersion() throws -> HTTPVersion?","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/getheader(_:)","title":"func getHeader(String) throws -> String?","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/getheadernames()","title":"func getHeaderNames() throws -> [String]","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/getmethod()","title":"func getMethod() throws -> HTTPMethod?","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/geturi()","title":"func getUri() throws -> String?","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/insertheader(_:_:)","title":"func insertHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/redirecttogripproxy(backend:)","title":"func redirectToGripProxy(backend: String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/redirecttowebsocketproxy(backend:)","title":"func redirectToWebsocketProxy(backend: String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/registerdynamicbackend(name:target:options:)","title":"func registerDynamicBackend(name: String, target: String, options: Fastly.Request.DynamicBackendOptions) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/removeheader(_:)","title":"func removeHeader(String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/send(_:backend:)","title":"func send(Fastly.Body, backend: String) throws -> (response: Fastly.Response, body: Fastly.Body)","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/sendasync(_:backend:)","title":"func sendAsync(Fastly.Body, backend: String) throws -> Fastly.PendingRequest","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/sendasyncstreaming(_:backend:)","title":"func sendAsyncStreaming(Fastly.Body, backend: String) throws -> Fastly.PendingRequest","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/setautodecompressresponse(encodings:)","title":"func setAutoDecompressResponse(encodings: ContentEncodings) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/setcachepolicy(_:surrogatekey:)","title":"func setCachePolicy(CachePolicy, surrogateKey: String?) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/setframingheadersmode(_:)","title":"func setFramingHeadersMode(FramingHeadersMode) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/sethttpversion(_:)","title":"func setHTTPVersion(HTTPVersion) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/setmethod(_:)","title":"func setMethod(HTTPMethod) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/seturi(_:)","title":"func setUri(String) throws","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/request\/downstreamclientipaddress()","title":"static func downstreamClientIpAddress() throws -> [UInt8]","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/downstreamtlsja3md5()","title":"static func downstreamTLSJA3MD5() throws -> [UInt8]","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/getdownstream()","title":"static func getDownstream() throws -> (request: Fastly.Request, body: Fastly.Body)","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/originalheadercount()","title":"static func originalHeaderCount() throws -> UInt32","type":"method"},{"path":"\/documentation\/compute\/fastly\/request\/originalheadernames()","title":"static func originalHeaderNames() throws -> [String]","type":"method"}],"path":"\/documentation\/compute\/fastly\/request","title":"Fastly.Request","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/response\/init()","title":"init() throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/fastly\/response\/appendheader(_:_:)","title":"func appendHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/gethttpversion()","title":"func getHTTPVersion() throws -> HTTPVersion?","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/getheader(_:)","title":"func getHeader(String) throws -> String?","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/getheadernames()","title":"func getHeaderNames() throws -> [String]","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/getstatus()","title":"func getStatus() throws -> Int","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/insertheader(_:_:)","title":"func insertHeader(String, String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/removeheader(_:)","title":"func removeHeader(String) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/send(_:streaming:)","title":"func send(Fastly.Body, streaming: Bool) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/setframingheadersmode(_:)","title":"func setFramingHeadersMode(FramingHeadersMode) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/sethttpversion(_:)","title":"func setHTTPVersion(HTTPVersion) throws","type":"method"},{"path":"\/documentation\/compute\/fastly\/response\/setstatus(_:)","title":"func setStatus(Int) throws","type":"method"}],"path":"\/documentation\/compute\/fastly\/response","title":"Fastly.Response","type":"struct"}],"path":"\/documentation\/compute\/fastly","title":"Fastly","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequesterror\/invalidurl","title":"case invalidURL","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequesterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/fetchrequesterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/fetchrequesterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/compute\/fetchrequesterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/compute\/fetchrequesterror","title":"FetchRequestError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/framingheadersmode\/automatic","title":"case automatic","type":"case"},{"path":"\/documentation\/compute\/framingheadersmode\/manuallyfromheaders","title":"case manuallyFromHeaders","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/framingheadersmode\/init(rawvalue:)","title":"init?(rawValue: UInt32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/framingheadersmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/framingheadersmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/framingheadersmode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/framingheadersmode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/framingheadersmode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/framingheadersmode","title":"FramingHeadersMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/accept","title":"case accept","type":"case"},{"path":"\/documentation\/compute\/httpheader\/acceptcharset","title":"case acceptCharset","type":"case"},{"path":"\/documentation\/compute\/httpheader\/acceptencoding","title":"case acceptEncoding","type":"case"},{"path":"\/documentation\/compute\/httpheader\/acceptlanguage","title":"case acceptLanguage","type":"case"},{"path":"\/documentation\/compute\/httpheader\/acceptranges","title":"case acceptRanges","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolallowcredentials","title":"case accessControlAllowCredentials","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolallowheaders","title":"case accessControlAllowHeaders","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolallowmethods","title":"case accessControlAllowMethods","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolalloworigin","title":"case accessControlAllowOrigin","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolexposeheaders","title":"case accessControlExposeHeaders","type":"case"},{"path":"\/documentation\/compute\/httpheader\/accesscontrolmaxage","title":"case accessControlMaxAge","type":"case"},{"path":"\/documentation\/compute\/httpheader\/age","title":"case age","type":"case"},{"path":"\/documentation\/compute\/httpheader\/altsvc","title":"case altSvc","type":"case"},{"path":"\/documentation\/compute\/httpheader\/authorization","title":"case authorization","type":"case"},{"path":"\/documentation\/compute\/httpheader\/cachecontrol","title":"case cacheControl","type":"case"},{"path":"\/documentation\/compute\/httpheader\/connection","title":"case connection","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentdisposition","title":"case contentDisposition","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentencoding","title":"case contentEncoding","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentlanguage","title":"case contentLanguage","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentlength","title":"case contentLength","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentrange","title":"case contentRange","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contentsecuritypolicy","title":"case contentSecurityPolicy","type":"case"},{"path":"\/documentation\/compute\/httpheader\/contenttype","title":"case contentType","type":"case"},{"path":"\/documentation\/compute\/httpheader\/cookie","title":"case cookie","type":"case"},{"path":"\/documentation\/compute\/httpheader\/crossoriginresourcepolicy","title":"case crossOriginResourcePolicy","type":"case"},{"path":"\/documentation\/compute\/httpheader\/date","title":"case date","type":"case"},{"path":"\/documentation\/compute\/httpheader\/etag","title":"case etag","type":"case"},{"path":"\/documentation\/compute\/httpheader\/expires","title":"case expires","type":"case"},{"path":"\/documentation\/compute\/httpheader\/fastlycachekey","title":"case fastlyCacheKey","type":"case"},{"path":"\/documentation\/compute\/httpheader\/forwarded","title":"case forwarded","type":"case"},{"path":"\/documentation\/compute\/httpheader\/from","title":"case from","type":"case"},{"path":"\/documentation\/compute\/httpheader\/host","title":"case host","type":"case"},{"path":"\/documentation\/compute\/httpheader\/keepalive","title":"case keepAlive","type":"case"},{"path":"\/documentation\/compute\/httpheader\/lastmodified","title":"case lastModified","type":"case"},{"path":"\/documentation\/compute\/httpheader\/link","title":"case link","type":"case"},{"path":"\/documentation\/compute\/httpheader\/location","title":"case location","type":"case"},{"path":"\/documentation\/compute\/httpheader\/pragma","title":"case pragma","type":"case"},{"path":"\/documentation\/compute\/httpheader\/range","title":"case range","type":"case"},{"path":"\/documentation\/compute\/httpheader\/referer","title":"case referer","type":"case"},{"path":"\/documentation\/compute\/httpheader\/refererpolicy","title":"case refererPolicy","type":"case"},{"path":"\/documentation\/compute\/httpheader\/server","title":"case server","type":"case"},{"path":"\/documentation\/compute\/httpheader\/setcookie","title":"case setCookie","type":"case"},{"path":"\/documentation\/compute\/httpheader\/surrogatecontrol","title":"case surrogateControl","type":"case"},{"path":"\/documentation\/compute\/httpheader\/surrogatekey","title":"case surrogateKey","type":"case"},{"path":"\/documentation\/compute\/httpheader\/trailer","title":"case trailer","type":"case"},{"path":"\/documentation\/compute\/httpheader\/transferencoding","title":"case transferEncoding","type":"case"},{"path":"\/documentation\/compute\/httpheader\/upgrade","title":"case upgrade","type":"case"},{"path":"\/documentation\/compute\/httpheader\/useragent","title":"case userAgent","type":"case"},{"path":"\/documentation\/compute\/httpheader\/vary","title":"case vary","type":"case"},{"path":"\/documentation\/compute\/httpheader\/via","title":"case via","type":"case"},{"path":"\/documentation\/compute\/httpheader\/xcache","title":"case xCache","type":"case"},{"path":"\/documentation\/compute\/httpheader\/xcachehits","title":"case xCacheHits","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/httpheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/httpheader\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/httpheader\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/httpheader","title":"HTTPHeader","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/httpmethod\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/get","title":"case get","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/head","title":"case head","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/options","title":"case options","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/patch","title":"case patch","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/post","title":"case post","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/put","title":"case put","type":"case"},{"path":"\/documentation\/compute\/httpmethod\/query","title":"case query","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/httpmethod\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/httpmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/httpmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpmethod\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/httpmethod\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/httpmethod\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/httpmethod","title":"HTTPMethod","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/httpstatus\/accepted","title":"case accepted","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/alreadyreported","title":"case alreadyReported","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/authenticationtimeout","title":"case authenticationTimeout","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/badgateway","title":"case badGateway","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/badrequest","title":"case badRequest","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/bandwidthlimitexceeded","title":"case bandwidthLimitExceeded","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/blockedbywindowsparentalcontrols","title":"case blockedByWindowsParentalControls","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/certerrornginx","title":"case certErrorNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/clientclosedrequestnginx","title":"case clientClosedRequestNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/conflict","title":"case conflict","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/connectiontimedout","title":"case connectionTimedOut","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/continue","title":"case `continue`","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/created","title":"case created","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/enhanceyourcalmtwitter","title":"case enhanceYourCalmTwitter","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/expectationfailed","title":"case expectationFailed","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/faileddependency","title":"case failedDependency","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/forbidden","title":"case forbidden","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/found","title":"case found","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/gatewaytimeout","title":"case gatewayTimeout","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/gone","title":"case gone","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/httptohttpsnginx","title":"case httpToHttpsNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/httpversionnotsupported","title":"case httpVersionNotSupported","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/iamateapot","title":"case iamATeapot","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/imused","title":"case imUsed","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/insufficientstorage","title":"case insufficientStorage","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/internalservererror","title":"case internalServerError","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/lengthrequired","title":"case lengthRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/locked","title":"case locked","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/loopdetected","title":"case loopDetected","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/methodfailurespringframework","title":"case methodFailureSpringFramework","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/methodfailurewebdaw","title":"case methodFailureWebDaw","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/methodnotallowed","title":"case methodNotAllowed","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/movedpermanently","title":"case movedPermanently","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/multistatus","title":"case multiStatus","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/multiplechoices","title":"case multipleChoices","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/networkauthenticationrequired","title":"case networkAuthenticationRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/networkconnecttimeouterrorunknown","title":"case networkConnectTimeoutErrorUnknown","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/networkreadtimeouterrorunknown","title":"case networkReadTimeoutErrorUnknown","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/nocertnginx","title":"case noCertNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/nocontent","title":"case noContent","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/noresponsenginx","title":"case noResponseNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/nonauthoritativeinformation","title":"case nonAuthoritativeInformation","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/notacceptable","title":"case notAcceptable","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/notextended","title":"case notExtended","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/notfound","title":"case notFound","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/notimplemented","title":"case notImplemented","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/notmodified","title":"case notModified","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/ok","title":"case ok","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/partialcontent","title":"case partialContent","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/paymentrequired","title":"case paymentRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/permanentredirect","title":"case permanentRedirect","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/preconditionfailed","title":"case preconditionFailed","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/preconditionrequired","title":"case preconditionRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/processing","title":"case processing","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/proxyauthenticationrequired","title":"case proxyAuthenticationRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/redirectmicrosoft","title":"case redirectMicrosoft","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requestentitytoolarge","title":"case requestEntityTooLarge","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requestheaderfieldstoolarge","title":"case requestHeaderFieldsTooLarge","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requestheadertoolargenginx","title":"case requestHeaderTooLargeNginx","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requesttimeout","title":"case requestTimeout","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requesturitoolong","title":"case requestURITooLong","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/requestedrangenotsatisfiable","title":"case requestedRangeNotSatisfiable","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/resetcontent","title":"case resetContent","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/retrywithmicrosoft","title":"case retryWithMicrosoft","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/seeother","title":"case seeOther","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/serviceunavailable","title":"case serviceUnavailable","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/switchproxy","title":"case switchProxy","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/switchingprotocols","title":"case switchingProtocols","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/temporaryredirect","title":"case temporaryRedirect","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/toomanyrequests","title":"case tooManyRequests","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/unauthorised","title":"case unauthorised","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/unavailableforlegalreasons","title":"case unavailableForLegalReasons","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/unorderedcollection","title":"case unorderedCollection","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/unprocessableentity","title":"case unprocessableEntity","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/unsupportedmediatype","title":"case unsupportedMediaType","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/upgraderequired","title":"case upgradeRequired","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/useproxy","title":"case useProxy","type":"case"},{"path":"\/documentation\/compute\/httpstatus\/variantalsonegotiates","title":"case variantAlsoNegotiates","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/httpstatus\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/httpstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/httpstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpstatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/httpstatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/httpstatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/httpstatus","title":"HTTPStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/httpversion\/h2","title":"case h2","type":"case"},{"path":"\/documentation\/compute\/httpversion\/h3","title":"case h3","type":"case"},{"path":"\/documentation\/compute\/httpversion\/http0_9","title":"case http0_9","type":"case"},{"path":"\/documentation\/compute\/httpversion\/http1_0","title":"case http1_0","type":"case"},{"path":"\/documentation\/compute\/httpversion\/http1_1","title":"case http1_1","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/httpversion\/init(rawvalue:)","title":"init?(rawValue: Int32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/httpversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/httpversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/httpversion\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/httpversion\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/httpversion\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/httpversion","title":"HTTPVersion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/ipaddress\/v4(_:)","title":"case v4(String)","type":"case"},{"path":"\/documentation\/compute\/ipaddress\/v6(_:)","title":"case v6(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/ipaddress\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/ipaddress\/localhost","title":"static var localhost: IPAddress","type":"property"}],"path":"\/documentation\/compute\/ipaddress","title":"IPAddress","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/anything","title":"case anything","type":"case"},{"path":"\/documentation\/compute\/pathcomponent\/catchall","title":"case catchall","type":"case"},{"path":"\/documentation\/compute\/pathcomponent\/constant(_:)","title":"case constant(String)","type":"case"},{"path":"\/documentation\/compute\/pathcomponent\/parameter(_:)","title":"case parameter(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/compute\/pathcomponent\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/compute\/pathcomponent\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/pathcomponent\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/compute\/pathcomponent\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/compute\/pathcomponent","title":"PathComponent","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/rangeinterval\/closed(start:end:)","title":"case closed(start: Int, end: Int)","type":"case"},{"path":"\/documentation\/compute\/rangeinterval\/open(start:)","title":"case open(start: Int)","type":"case"},{"path":"\/documentation\/compute\/rangeinterval\/suffix(length:)","title":"case suffix(length: Int)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/rangeinterval\/fixed(totallength:)","title":"func fixed(totalLength: Int) -> FixedRange","type":"method"}],"path":"\/documentation\/compute\/rangeinterval","title":"RangeInterval","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/tlsversion\/v1","title":"case v1","type":"case"},{"path":"\/documentation\/compute\/tlsversion\/v1_1","title":"case v1_1","type":"case"},{"path":"\/documentation\/compute\/tlsversion\/v1_2","title":"case v1_2","type":"case"},{"path":"\/documentation\/compute\/tlsversion\/v1_3","title":"case v1_3","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/tlsversion\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/tlsversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/tlsversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/tlsversion\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/tlsversion\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/tlsversion\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/tlsversion","title":"TLSVersion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/badalignment","title":"case badAlignment","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/baddescriptor","title":"case badDescriptor","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/bufferlength","title":"case bufferLength","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/httpheadtoolarge","title":"case httpHeadTooLarge","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/httpincomplete","title":"case httpIncomplete","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/httpinvalid","title":"case httpInvalid","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/httpinvalidstatus","title":"case httpInvalidStatus","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/httpuser","title":"case httpUser","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/invalidargument","title":"case invalidArgument","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/limitexceeded","title":"case limitExceeded","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/none","title":"case none","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/ok","title":"case ok","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/unexpected","title":"case unexpected","type":"case"},{"path":"\/documentation\/compute\/wasistatus\/unsupported","title":"case unsupported","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/init(rawvalue:)","title":"init?(rawValue: Int32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/compute\/wasistatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/compute\/wasistatus\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/errordescription-39rdo","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/compute\/wasistatus\/errordescription-4s71t","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/compute\/wasistatus\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/compute\/wasistatus\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/compute\/wasistatus\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/compute\/wasistatus\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/compute\/wasistatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/compute\/wasistatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/compute\/wasistatus","title":"WasiStatus","type":"enum"}],"path":"\/documentation\/compute","title":"Compute","type":"module"},{"path":"\/documentation\/compute\/environment\/subscript(_:)","title":"static subscript(String) -> String?","type":"subscript"},{"path":"\/documentation\/compute\/environment\/subscript(_:default:)","title":"static subscript(String, default _: String) -> String","type":"subscript"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}